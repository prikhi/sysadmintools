---

- name: Ensure Nova Database Exists
  mysql_db: name={{ item }}
            login_user=root login_password="{{ vaulted_db_root_password }}"
  with_items:
    - "{{ nova_db_name }}"
    - "{{ nova_db_name }}_api"
  notify: sync nova database
  when: inventory_hostname in groups['master-controller']

- name: Ensure the Nova Database User Exists
  mysql_user: name={{ nova_db_user }} password={{ vaulted_db_password }}
              priv='{{ nova_db_name }}.*:ALL' host="{{ item }}" append_privs=yes
              login_user=root login_password="{{ vaulted_db_root_password }}"
  with_items:
    - localhost
    - '%'
  notify: sync nova database
  when: inventory_hostname in groups['master-controller']

- name: Ensure the Nova API Database User Exists
  mysql_user: name={{ nova_db_user }} priv='{{ nova_db_name }}_api.*:ALL'
              host="{{ item }}" append_privs=yes
              login_user=root login_password="{{ vaulted_db_root_password }}"
  with_items:
    - localhost
    - '%'
  notify: sync nova database
  when: inventory_hostname in groups['master-controller']

- name: Retrieve a List of Existing Users
  shell: openstack user list -f value -c Name
  register: os_users
  changed_when: false

- name: Ensure the OpenStack Nova User Exists
  shell: openstack user create --domain default
         --password "{{ vaulted_nova_os_password|quote }}"
         "{{ nova_os_user }}"
  when: (os_users.stdout.find(nova_os_user) == -1) and
        (inventory_hostname in groups['master-controller'])

- name: Ensure the OpenStack Nova User's Role is Properly Configured
  shell: openstack role add --project {{ service_os_project }}
         --user {{ nova_os_user }} admin
  when: inventory_hostname in groups['master-controller']

- name: Retrieve a List of OpenStack Services
  shell: openstack endpoint list -c "Service Type" -f value
  register: os_services
  changed_when: false

- name: Ensure the OpenStack Nova Service Exists
  shell: openstack service create --name nova
         --description "Compute Service" compute
  when: (os_services.stdout.find("compute") == -1) and
        (inventory_hostname in groups['master-controller'])

- name: Ensure the Compute Service API Endpoints Exist
  shell: openstack endpoint create --region RegionOne compute {{ item }}
         http://{{ master_controller_hostname }}:8774/v2.1/%\(tenant_id\)s
  with_items:
      - public
      - internal
      - admin
  when: (os_services.stdout.find("compute") == -1) and
        (inventory_hostname in groups['master-controller'])

- name: Ensure Nova is Installed
  apt: name={{ item }}
  with_items:
    - nova-api
    - nova-conductor
    - nova-consoleauth
    - nova-novncproxy
    - nova-scheduler
  become: yes

- name: Ensure Nova is Correctly Configured
  ini_file: dest=/etc/nova/nova.conf section="{{ item.section }}"
            option="{{ item.option }}" value="{{ item.value }}"
  with_items: "{{ common_auth_config + common_rabbit_config + common_nova_config + nova_config  }}"
  become: yes
  notify:
    - sync nova database
    - restart nova

- name: Ensure the Default Nova Database is Removed
  file: state=absent path=/var/lib/nova/nova.sqlite
  become: yes
