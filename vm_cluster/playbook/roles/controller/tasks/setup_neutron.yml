---

- name: Ensure the Neutron Database Exists
  postgresql_db: name={{ neutron_db_name }}
  become: yes
  become_user: postgres

- name: Ensure the Neutron Database User Exists
  postgresql_user: name={{ neutron_db_user }} db={{ neutron_db_name }}
                   password={{ vaulted_db_password }}
  become: yes
  become_user: postgres

- name: Retrieve a List of Existing Users
  shell: openstack user list -f value -c Name
  register: os_users

- name: Ensure the OpenStack Neutron User Exists
  shell: openstack user create --domain default
         --password "{{ vaulted_neutron_os_password|quote }}"
         "{{ neutron_os_user }}"
  when: os_users.stdout.find(neutron_os_user) == -1

- name: Ensure the OpenStack Neutron User's Role is Properly Configured
  keystone_user: role=admin user="{{ neutron_os_user }}"
                 tenant="{{ service_os_project }}"
                 token="{{ vaulted_admin_token }}"

- name: Ensure the OpenStack Neutron Service & Endpoints are Correctly Configured
  keystone_service: name=neutron type=network description="Networking Service"
                    url="http://{{ ansible_hostname }}:9696"
                    token="{{ vaulted_admin_token }}"

- name: Ensure the OpenStack Neutron Self-Service Components are Installed
  apt: name={{ item }}
  with_items:
    - neutron-server
    - neutron-plugin-ml2
    - neutron-plugin-linuxbridge-agent
    - neutron-l3-agent
    - neutron-dhcp-agent
    - neutron-metadata-agent
    - python-neutronclient
    - conntrack
  become: yes

- name: Ensure the Neutron Service is Correctly Configured
  ini_file: dest=/etc/neutron/neutron.conf section="{{ item.section }}"
            option="{{ item.option }}" value="{{ item.value }}"
  with_items: "{{ common_auth_config + common_rabbit_config + common_neutron_config + neutron_config }}"
  become: yes
  notify:
    - sync neutron database
    - restart neutron

- name: Ensure the Neutron ML2 Plugin is Correctly Configured
  ini_file: dest=/etc/neutron/plugins/ml2/ml2_conf.ini
            section="{{ item.section }}" option="{{ item.option }}"
            value="{{ item.value }}"
  with_items:
    - { section: 'ml2', option: 'type_drivers', value: 'flat,vlan,vxlan' }
    - { section: 'ml2', option: 'tenant_network_types', value: 'vxlan' }
    - { section: 'ml2', option: 'mechanism_drivers', value: 'linuxbridge,l2population' }
    - { section: 'ml2', option: 'extension_drivers', value: 'port_security' }
    - { section: 'ml2_type_flat', option: 'flat_networks', value: 'public' }
    - { section: 'ml2_type_vxlan', option: 'vni_ranges', value: '1:1000' }
    - { section: 'securitygroup', option: 'enable_ipset', value: 'True' }
  become: yes
  notify: restart neutron

- name: Ensure the Linux Bridge Agent is Correctly Configured
  ini_file: dest=/etc/neutron/plugins/ml2/linuxbridge_agent.ini
            section="{{ item.section }}" option="{{ item.option }}"
            value="{{ item.value }}"
  with_items: linux_bridge_agent_config
  become: yes
  notify: restart neutron

- name: Ensure the Layer-3 Agent is Correctly Configured
  ini_file: dest=/etc/neutron/l3_agent.ini section=DEFAULT
            option="{{ item.option }}" value="{{ item.value }}"
  with_items:
    - { option: 'interface_driver',
        value: 'neutron.agent.linux.interface.BridgeInterfaceDriver' }
    - { option: 'external_network_bridge', value: '' }
  become: yes
  notify: restart neutron

- name: Ensure the DHCP Agent is Correctly Configured
  ini_file: dest=/etc/neutron/dhcp_agent.ini section=DEFAULT
            option="{{ item.option }}" value="{{ item.value }}"
  with_items:
    - { option: 'interface_driver',
        value: 'neutron.agent.linux.interface.BridgeInterfaceDriver' }
    - { option: 'dhcp_driver',
        value: 'neutron.agent.linux.dhcp.Dnsmasq' }
    - { option: 'enable_isolated_metadata', value: 'True' }
  become: yes
  notify: restart neutron

- name: Ensure the Metadata Agent is Correctly Configured
  ini_file: dest=/etc/neutron/metadata_agent.ini section=DEFAULT
            option="{{ item.option }}" value="{{ item.value }}"
  with_items:
    - { option: 'auth_uri',
        value: 'http://{{ master_controller_hostname }}:5000' }
    - { option: 'auth_url',
        value: 'http://{{ master_controller_hostname }}:35357' }
    - { option: 'auth_region', value: 'RegionOne' }
    - { option: 'auth_plugin', value: 'password' }
    - { option: 'project_domain_id', value: 'default' }
    - { option: 'user_domain_id', value: 'default' }
    - { option: 'project_name', value: '{{ service_os_project }}' }
    - { option: 'username', value: '{{ neutron_os_user }}' }
    - { option: 'password', value: '{{ vaulted_neutron_os_password }}' }
    - { option: 'nova_metadata_ip', value: '{{ master_controller_hostname }}' }
    - { option: 'metadata_proxy_shared_secret',
        value: '{{ vaulted_metadata_secret }}' }
  become: yes
  notify: restart neutron

- name: Ensure Nova is Configured to Use Neutron
  ini_file: dest=/etc/nova/nova.conf section=neutron
            option="{{ item.option }}" value="{{ item.value }}"
  with_items: "{{ common_nova_neutron_config + nova_neutron_config }}"
  become: yes
  notify: restart nova api

- name: Ensure the Default Nova Database is Removed
  file: state=absent path=/var/lib/neutron/neutron.sqlite
  become: yes
