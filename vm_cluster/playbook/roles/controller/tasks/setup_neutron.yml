---

- name: Ensure Neutron Database Exists
  mysql_db: name={{ neutron_db_name }}
            login_user=root login_password="{{ vaulted_db_root_password }}"
  notify:
    - sync neutron database
  when: inventory_hostname in groups['master-controller']
  become: yes

- name: Ensure the Neutron Database User Exists
  mysql_user: name={{ neutron_db_user }} password={{ vaulted_db_password }}
              priv='{{ neutron_db_name }}.*:ALL' host="{{ item }}"
              login_user=root login_password="{{ vaulted_db_root_password }}"
  with_items:
    - localhost
    - '%'
  when: inventory_hostname in groups['master-controller']
  become: yes

- name: Retrieve a List of Existing Users
  shell: openstack user list -f value -c Name
  register: os_users
  changed_when: false

- name: Ensure the OpenStack Neutron User Exists
  shell: openstack user create --domain default
         --password "{{ vaulted_neutron_os_password|quote }}"
         "{{ neutron_os_user }}"
  when: (os_users.stdout.find(neutron_os_user) == -1) and
        (inventory_hostname in groups['master-controller'])

- name: Ensure the OpenStack Neutron User's Role is Properly Configured
  shell: openstack role add --project {{ service_os_project }}
         --user {{ neutron_os_user }} admin

- name: Retrieve a List of OpenStack Services
  shell: openstack endpoint list -c "Service Type" -f value
  register: os_services
  changed_when: false

- name: Ensure the OpenStack Neutron Service Exists
  shell: openstack service create --name neutron
         --description "Networking Service" network
  when: (os_services.stdout.find("network") == -1) and
        (inventory_hostname in groups['master-controller'])

- name: Ensure the Network Service Endpoints Exist
  shell: openstack endpoint create --region RegionOne network {{ item }}
         http://{{ master_controller_hostname }}:9696
  with_items:
    - public
    - internal
    - admin
  when: (os_services.stdout.find("network") == -1) and
        (inventory_hostname in groups['master-controller'])

- name: Ensure the OpenStack Neutron Components are Installed
  apt: name={{ item }}
  with_items:
    - neutron-l3-agent
    - neutron-openvswitch-agent
    - neutron-plugin-ml2
    - neutron-server
  become: yes

- name: Ensure the Neutron Service is Correctly Configured
  ini_file: dest=/etc/neutron/neutron.conf section="{{ item.section }}"
            option="{{ item.option }}" value="{{ item.value }}"
  with_items: "{{ common_auth_config + common_rabbit_config + common_neutron_config + neutron_config }}"
  become: yes
  notify:
    - sync neutron database
    - restart neutron

- name: Ensure the Neutron ML2 Plugin is Correctly Configured
  ini_file: dest=/etc/neutron/plugins/ml2/ml2_conf.ini
            section="{{ item.section }}" option="{{ item.option }}"
            value="{{ item.value }}"
  with_items: "{{ ml2_config }}"
  become: yes
  notify: restart neutron

- name: Ensure the Open vSwitch Agent is Correctly Configured
  ini_file: dest=/etc/neutron/plugins/ml2/openvswitch_agent.ini
            section="{{ item.section }}" option="{{ item.option }}"
            value="{{ item.value }}"
  with_items: "{{ common_ovs_config + ovs_agent_config }}"
  become: yes
  notify: restart neutron

- name: Ensure the Layer-3 Agent is Correctly Configured
  ini_file: dest=/etc/neutron/l3_agent.ini section=DEFAULT
            option="{{ item.option }}" value="{{ item.value }}"
  with_items: "{{ common_l3_agent_config + l3_agent_config }}"
  become: yes
  notify: restart neutron

- name: Ensure Nova is Configured to Use Neutron
  ini_file: dest=/etc/nova/nova.conf section=neutron
            option="{{ item.option }}" value="{{ item.value }}"
  with_items: "{{ common_nova_neutron_config }}"
  become: yes
  notify: restart nova api

- name: Ensure the Default Nova Database is Removed
  file: state=absent path=/var/lib/neutron/neutron.sqlite
  become: yes
