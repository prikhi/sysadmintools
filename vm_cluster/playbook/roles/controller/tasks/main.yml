---

- name: Ensure PostgreSQL is Installed
  apt: name={{ item }}
  become: yes
  with_items:
    - postgresql
    - python-psycopg2

- name: Ensure MongoDB is Installed
  apt: name={{ item }}
  become: yes
  with_items:
    - mongodb-server
    - mongodb-clients
    - python-pymongo

- name: Ensure MongoDB is Correctly Configured
  lineinfile: dest=/etc/mongodb.conf regexp='bind_ip = .*'
              line='bind_ip = {{ ansible_default_ipv4.address }}'
  become: yes
  notify: restart mongodb

- name: Ensure RabbitMQ is Installed
  apt: name=rabbitmq-server
  become: yes

- name: Add the RabbitMQ User
  rabbitmq_user: user={{ mq_user }} password={{ vaulted_mq_password }} vhost=/
                 configure_priv=.* read_priv=.* write_priv=.*
  become: yes

- name: Ensure Keystone Database Exists
  postgresql_db: name={{ keystone_db_name }}
  become: yes
  become_user: postgres

- name: Ensure the Keystone Database User Exists
  postgresql_user: name={{ keystone_db_user }} db={{ keystone_db_name }}
                   password={{ vaulted_db_password }}
  become: yes
  become_user: postgres

- name: Ensure Keystone Does Not Start Automatically
  lineinfile: dest=/etc/init/keystone.override regexp='.*' line='manual' create=yes
  become: yes

- name: Ensure Keystone is Installed
  apt: name={{ item }}
  become: yes
  with_items:
    - apache2
    - keystone
    - libapache2-mod-wsgi
    - memcached
    - python-memcache
    - python-shade

- name: Ensure Keystone is Correctly Configured
  ini_file: dest=/etc/keystone/keystone.conf section="{{ item.section }}"
            option="{{ item.option }}" value="{{ item.value }}"
  become: yes
  with_items:
    - { section: 'DEFAULT', option: 'admin_token', value: "{{ vaulted_admin_token }}" }
    - { section: 'database', option: 'connection',
        value: 'postgresql://{{ keystone_db_user }}:{{ vaulted_db_password }}@localhost/keystone' }
    - { section: 'memcache', option: 'servers', value: 'localhost:11211' }
    - { section: 'token', option: 'driver', value: 'memcache' }
    - { section: 'token', option: 'provider', value: 'uuid' }
    - { section: 'revoke', option: 'driver', value: 'sql' }
  notify:
    - sync keystone database
    - restart keystone

- name: Ensure Apache is Correctly Configured
  lineinfile: dest=/etc/apache2/apache2.conf
              regexp='^ServerName .*' line='ServerName {{ ansible_hostname }}'
  become: yes
  notify: restart apache

- name: Ensure Keystone Virtual Host is Correctly Configured
  copy: src=apache-keystone.conf dest=/etc/apache2/sites-available/wsgi-keystone.conf
  become: yes
  notify: restart apache

- name: Ensure the Keystone Virtual Host is Enabled
  file: src=/etc/apache2/sites-available/wsgi-keystone.conf
        dest=/etc/apache2/sites-enabled/wsgi-keystone.conf state=link
  become: yes
  notify: restart apache

- name: Ensure Default Keystone Database is Removed
  file: state=absent path=/var/lib/keystone/keystone.db
  become: yes

- meta: flush_handlers

- name: Ensure the OpenStack Identity Service & Endpoints are Correctly Configured
  keystone_service: name=keystone type=identity description="Identity Service"
                    token="{{ vaulted_admin_token }}"
                    url="http://{{ ansible_hostname }}:5000/v3.0"
                    admin_url="http://{{ ansible_hostname }}:35357/v3.0"

- name: Retrieve a List of Existing Projects
  shell: openstack project list -f value -c Name
  register: os_projects

- name: Ensure the OpenStack Admin Project Exists
  shell: openstack project create --domain default
         --description "Administrative Project" "{{ admin_os_project|quote }}"
  when: os_projects.stdout.find(admin_os_project) == -1

- name: Ensure the OpenStack Service Project Exists
  shell: openstack project create --domain default
         --description "Service Project" "{{ service_os_project|quote }}"
  when: os_projects.stdout.find(service_os_project) == -1

- name: Ensure the OpenStack Default Project Exists
  shell: openstack project create --domain default
         --description "Default Project" "{{ default_os_project|quote }}"
  when: os_projects.stdout.find(default_os_project) == -1

- name: Retrieve a List of Existing Users
  shell: openstack user list -f value -c Name
  register: os_users

- name: Ensure the OpenStack Admin User Exists
  shell: openstack user create --domain default --project "{{ default_os_project|quote }}"
         --password "{{ vaulted_os_user_password|quote }}" --email "{{ vaulted_os_user_email|quote }}"
         admin
  when: os_users.stdout.find(admin_os_user) == -1

- name: Ensure the OpenStack Admin Role is Properly Configured
  keystone_user:  role=admin user="{{ admin_os_user }}"
                  tenant="{{ admin_os_project }}" token="{{ vaulted_admin_token }}"
