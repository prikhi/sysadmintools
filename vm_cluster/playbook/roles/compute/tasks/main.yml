---

# TODO: Getting big enough that it should be split into multiple files

- name: Ensure the Ceph Dependencies are Installed
  apt: name=ceph-common
  become: yes
  tags:
    - ceph
    - ha

- name: Ensure OpenStack Nova is Installed
  apt: name=nova-compute
  become: yes
  tags: nova

- name: Ensure OpenStack Nova is Correctly Configured
  ini_file: dest=/etc/nova/nova.conf section="{{ item.section }}"
            option="{{ item.option }}" value="{{ item.value }}"
  with_items: "{{ common_auth_config + common_rabbit_config + common_nova_config + nova_config }}"
  become: yes
  notify: restart nova compute
  tags: nova

- name: Determine if KVM is Supported
  shell: egrep -c '(vmx|svm)' /proc/cpuinfo || /bin/true
  register: has_kvm_support
  changed_when: false
  tags: nova

- name: Ensure QEMU is Used for Virtualization
  ini_file: dest=/etc/nova/nova-compute.conf section=libvirt
            option=virt_type value=qemu
  become: yes
  when: has_kvm_support.stdout == '0'
  notify: restart nova compute
  tags: nova

- name: Ensure the Default Nova Database is Removed
  file: state=absent path=/var/lib/nova/nova.sqlite
  become: yes
  tags: nova

- name: Ensure OpenStack Neutron is Installed
  apt: name="{{ item }}"
  with_items:
    - neutron-dhcp-agent
    - neutron-l3-agent
    - neutron-metadata-agent
    - neutron-openvswitch-agent
  become: yes
  tags: neutron

- name: Ensure Neutron is Correctly Configured
  ini_file: dest=/etc/neutron/neutron.conf section="{{ item.section }}"
            option="{{ item.option }}" value="{{ item.value }}"
  with_items: "{{ common_auth_config + common_rabbit_config + common_neutron_config + neutron_config }}"
  become: yes
  notify:
    - restart ovs agent
    - restart dhcp agent
    - restart metadata agent
  tags: neutron

- name: Ensure the Neutron ML2 Plugin is Correctly Configured
  ini_file: dest=/etc/neutron/plugins/ml2/ml2_conf.ini
            section="{{ item.section }}" option="{{ item.option }}"
            value="{{ item.value }}"
  with_items: "{{ ml2_config }}"
  become: yes
  tags: neutron

- name: Ensure the Open vSwitch Agent is Correctly Configured
  ini_file: dest=/etc/neutron/plugins/ml2/openvswitch_agent.ini
            section="{{ item.section }}" option="{{ item.option }}"
            value="{{ item.value }}"
  with_items: "{{ common_ovs_config + ovs_agent_config }}"
  become: yes
  notify: restart ovs agent
  tags: neutron

- name: Ensure the DHCP Agent is Correctly Configured
  ini_file: dest=/etc/neutron/dhcp_agent.ini
            section="DEFAULT" option="{{ item.option }}"
            value="{{ item.value }}"
  with_items: "{{ dhcp_agent_config }}"
  become: yes
  notify: restart dhcp agent
  tags: neutron

- name: Ensure the Metadata Agent is Correctly Configured
  ini_file: dest=/etc/neutron/metadata_agent.ini
            section="DEFAULT" option="{{ item.option }}"
            value="{{ item.value }}"
  with_items: "{{ metadata_agent_config }}"
  become: yes
  notify: restart metadata agent
  tags: neutron

- name: Ensure the Layer-3 Agent is Correctly Configured
  ini_file: dest=/etc/neutron/l3_agent.ini section=DEFAULT
            option="{{ item.option }}" value="{{ item.value }}"
  with_items: "{{ common_l3_agent_config + l3_agent_config }}"
  become: yes
  notify: restart l3 agent
  tags: neutron

- name: Ensure Nova is Configured to Use Neutron
  ini_file: dest=/etc/nova/nova.conf section=neutron
            option="{{ item.option }}" value="{{ item.value }}"
  with_items: "{{ common_nova_neutron_config }}"
  become: yes
  notify: restart nova compute
  tags: neutron

- name: Ensure Nova is Configure to Use Ceph
  ini_file: dest=/etc/nova/nova.conf section=libvirt
            option="{{ item.option }}" value="{{ item.value }}"
  with_items: "{{ ceph_config }}"
  become: yes
  notify: restart nova compute
  tags: ceph

- name: Ensure the Ceph Client is Correctly Configured
  ini_file: dest=/etc/ceph/ceph.conf section=client
            option="{{ item.option }}" value="{{ item.value }}"
  with_items: "{{ ceph_client_config }}"
  become: yes
  tags: ceph

- name: Ensure the Ceph Client Socket & Log Directories Exist
  file: path="{{ item }}" state=directory owner=libvirt-qemu group=libvirt
        mode=0775
  with_items: [ "/var/log/qemu", "/var/run/ceph/guests" ]
  become: yes
  tags: ceph

- name: Determine if the Ceph Secret has been Added to Libvirtd
  shell: virsh secret-list
  register: libvirt_secrets
  changed_when: false
  become: yes
  tags:
    - ceph
    - nova

- name: Add the Temporary Libvirt Secret File
  template: src=libvirt_secret.xml.j2 dest=/root/secret.xml
  when: libvirt_secrets.stdout.find(vaulted_rbd_cinder_uuid) == -1
  become: yes
  tags:
    - ceph
    - nova

- name: Ensure the Libvirt Ceph Secret Exists
  shell: virsh secret-define --file /root/secret.xml
  when: libvirt_secrets.stdout.find(vaulted_rbd_cinder_uuid) == -1
  become: yes
  tags:
    - ceph
    - nova

- name: Ensure the Temporary Libvirt Secret File is Removed
  file: path=/root/secret.xml state=absent
  when: libvirt_secrets.stdout.find(vaulted_rbd_cinder_uuid) == -1
  become: yes
  tags:
    - ceph
    - nova

- name: Determine the Value of the Ceph Libvirtd Secret
  shell: virsh secret-get-value "{{ vaulted_rbd_cinder_uuid }}"
  register: libvirt_secret_value
  when: libvirt_secrets.stdout.find(vaulted_rbd_cinder_uuid) != -1
  changed_when: false
  become: yes
  tags:
    - ceph
    - nova

- name: Ensure the Libvirt Ceph Secret is Correctly Configured
  shell: virsh secret-set-value --secret "{{ vaulted_rbd_cinder_uuid }}"
         --base64 "{{ vaulted_rbd_cinder_key }}"
  when: (libvirt_secrets.stdout.find(vaulted_rbd_cinder_uuid) == -1) or
        (libvirt_secret_value.stdout.find(vaulted_rbd_cinder_key) == -1)
  become: yes
  tags:
    - ceph
    - nova
